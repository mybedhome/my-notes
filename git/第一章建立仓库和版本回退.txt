### 初建项目

1，在本地项目目录初始化git init，这样git就能跟踪这个目录下的所有文件了

2，将本地项目目录与远程仓库建立链接，如果没有可以在github网站新建一个仓库
git remote add origin master git@github.com:mybedhome/study-notes.git

3,将本地项目提交到远程仓库
git push //如果是第一次提交请使用git push origin master
//如果远程仓库不是空的必须先git pull origin master后再git push

//删除远程仓库的文件
git rm localfile.txt
git commit -m '先删除本地文件'
git push //删除远程仓库的文件

### git版本回退
git版本回退有两种情况，一种是从本地版本库中(head区)回退到某个版本，
可以用命令 git reset --hard head^ 或git reset --hard head~x ，
head指的是当前版本，head^指的是回退到上一个版本，head~x，x为任意大于0的数字，
表示回退到当前版本的前x个版本。
(如果从最新的版本库回退到某个版本时又反悔了还是想回到最新的版本库，可以用git reflog命令找到每次操作的id，然后用命令git reset --hard id可以回到对应的版本)

第二种情况是从暂存区回退到工作区，比如我添加了filename.txt这个文件到暂存区 git add filename.txt,
然后我又不想让它保存到暂存区了，可以用命令git reset head filename.txt，
这样当我们执行commit命令的时候，filename.txt文件就不会被提交到本地版本库中了。

Note:git reset head filename,这种情况只是从暂存区删除文件，并不会还原文件的内容。
如果想放弃当前文件所做的任何修改，还原到最初状态
请使用git reset --hard head或者git checkout -- filename
(filename可以是具体的文件，也可以是目录,如果是目录针对该目录下对应的文件批量操作)
例如:git checkout -- a newfile.txt //还原a目录下面所有有修改过的文件和newfile.txt



当远程仓库和本地工作区修改同一个文件，但是不同的地方git pull 或者git push都会报错，必须先解决合并冲突

解决的办法:
1,完全放弃本地所作的修改
1.1 如果没有add到暂存区，使用git checkout -- filename 放弃修改
1.2 如果已经add到暂存区，先使用git reset head filename 将修改的文件从暂存区移除(如果直接checkout不会产生任何效果)，然后再使用git checkout -- filename
或者 git reset --hard head
1.3 如果已经commmit到本地仓库，使用git reset --hard head^ 放弃修改

2,git stash 储藏当前工作区，等pull成功后再恢复,git stash apply

放弃追踪 git rm --cached file

###  添加多个远程仓库

1. git remote add originName 远程仓库地址

2. git push [-u] originName(远程仓库名) master(分支名)

3. git remote set-url --add originName 远程仓库地址  //这种方式也可以添加远程仓库，但是只关联push操作，就是说比如你本地有2个名叫shaoshan的远程仓库，在执行`git push`命令时会同时推送到这2个远程仓库，但是执行`git pull`命令的时候只会从默认的那个远程仓库拉取代码。

   ![image-20200423160541311](/Users/wuhan/Library/Application Support/typora-user-images/image-20200423160541311.png)

   

可以使用git ls-remote命令查看当前默认使用的是哪个远程仓库，默认是最后添加的那个
git push originName //将本地更新数据推送到指定的远程仓库

### git日志查看
git log
--oneline 选项：不显示详细信息，只列出 commit 的 id 和标题
-p 选项：列出 commit 里的文件差异
--name-only 选项：列出每条 commit 所修改的文件名。此选项只列出修改的文件名，不列出修改类型
--name-status 选项：列出每条 commit 所修改的文件名和对应的修改类型
--stat 选项：列出每条 commit 所修改的统计信息

### git Diff操作
Diff 操作用于查看比较两个 commit 或者两个不同代码区域的文件异同
git diff：默认比较工作区和暂存区
--cached 选项：比较暂存区和本地代码库的差异
在命令后面指定特定的文件名，也可以比较特定文件的差异
~~~
git diff readme.md
git diff --cached readme.md
~~~

### git clone
默认情况下，git clone 会将远端代码库全部克隆到本地。Git 还支持只克隆特定分支到本地。
我们可以使用 `git clone -b branchname --single-branch git@URL命令`


### 配置命令
配置命令的别名
~~~
// 设置一个别名 lg，使得查看 log 时只需要显示 commit id 的短名称
git config --global alias.lg "log --abbrev-commit"

git config --global alias.st "status"
git config --global alias.cm "commit"
~~~

查看配置信息
git config --global -l

### 代码回滚
回滚（Rollback）操作指的是将已经提交到代码库的 commit 生成一个与对应 commit 完全相反的 commit，
相当于是对目标 commit 进行一次代码修改的逆向操作。在实际项目中，经常用于进行版本的回滚或对某些错误提交进行回滚。
Git 中是使用 revert 命令进行回滚操作，它会生成一条新的反向 commit，同时保留目标 commit。
git revert eb4f4ed3

### 查看配置信息
git config --system --list // 查看系统配置
git config --global  --list // 查看当前用户配置
git config --local  --list  // 查看当前仓库配置

查看用户名和邮箱地址：

$ git config user.name

$ git config user.email

修改用户名和邮箱地址

$  git config --global user.name  "xxxx"

S  git config --global user.email  "xxxx"
